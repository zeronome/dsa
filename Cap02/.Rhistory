# Matrizes precisam ter um número de elementos que seja múltiplo do número de linhas
matrix (c(1,2,3,4,5), nc = 2)
x <- matrix (c(1,2,3,4,5), nc = 2)
x
# Multiplicação de Matrizes
mat1 <- matrix(c(2,3,4,5), nr = 2)
mat1
mat2 <- matrix(c(6,7,8,9), nr = 2)
mat2
mat1 * mat2
mat1 / mat2
mat1 + mat2
mat1 - mat2
# Multiplicando Matriz com Vetor
x = c(1:4)
x
y <- matrix(c(2,3,4,5), nr = 2)
x * y
lista1 <- list(1:10, c("Zico", "Ronaldo", "Garrincha"), rnorm(10))
lista1
# Slicing (Fatiamento) da Lista
lista1[1]
lista1[2]
lista1[[2]][1]
lista1[[2]][1] = "Monica"
lista1
# Para nomear os elementos - Listas Nomeadas
names(lista1) <- c("inteiros", "caracteres", "numéricos")
lista1
lista2 <- list(Numeros = vec_num, Letras = vec_char)
vec_num <- 1:4
vec_char <- c("A", "B", "C", "D")
lista2 <- list(Numeros = vec_num, Letras = vec_char)
# Combinando 2 listas
lista3 <- c(lista1, lista2)
lista3
typeof(lista3)
typeof(lista2)
typeof(lista1)
vector = 1:5
typeof(vector)
vector
class(vector)
mode(vector)
list4 <- c(lista1, vector)
list4
typeof(list4)
v <- c(1:5)
type.convert(v)
v
typeof(v)
class(v)
mode(v)
c(list1, v)
c(lista1, v)
# Unindo 2 elementos em uma lista
mat = matrix(1:4, nrow = 2)
mat
vec = c(1:9)
vec
lst = list(mat, vec)
lst
c(mat, vec)
mat
vec
data <- c(1,2,2,3,1,1,3,2,1,3,3,2,2,2)
fatores <- factor(data, labels = c("I","II","III"))
Summary(fatores)
summary(fatores)
fatores
fatores <- factor(data, labels = c("II","I","III"))
summary(fatores)
fatores
fatores <- factor(data, labels = c("1","2","3"))
data <- c("III", "I", "I", "II", "III", "II")
fatores <- factor(data, labels = c("1","2","3"))
fatores
fatores <- factor(data, labels = c("3","1","2"))
fatores
fatores <- factor(data, labels = c("3","1","3"))
fatores
data <- c(10,15,11,10,21,23,10,45,55,16,28,24,23,15,56,70,08)
fatores <- factor(data, labels = c("1","2","3"))
num = c(1:2)
jogandoDados <- function(){
num <- sample(1:6, 1)
num
}
num
jogandoDados()
jogandoDados()
num
is_oddbit <- function(n){
return( bitwAnd(n,1) == 0)
}
is_oddcommon <- function(n){
return( x%%2 == 0)
}
lapply(1:10, is_oddbit)
system.time(lapply(5:5000, is_oddbit))
system.time(lapply(5:5000, is_oddcommon))
is_oddcommon <- function(n){
return( n%%2 == 0)
}
system.time(lapply(5:5000, is_oddbit))
system.time(lapply(5:5000, is_oddcommon))
system.time(lapply(5:50000, is_oddbit))
system.time(lapply(5:50000, is_oddcommon))
system.time(lapply(5:500000, is_oddbit))
system.time(lapply(5:500000, is_oddcommon))
system.time(lapply(5:500000, is_oddbit))
system.time(lapply(5:500000, is_oddcommon))
is_oddbit <- function(n){
return( as.integer(as.raw(n) & as.raw(1)) == 0)
}
system.time(lapply(5:500000, is_oddbit))
07 & 01
06 & 00
as.raw(7)
as.raw(7) & as.raw(01) == as.raw(0)
type(as.raw(7) & as.raw(01))
mode(as.raw(7) & as.raw(01))
class(as.raw(7) & as.raw(01))
is_oddbit <- function(n){
return( bitwAnd(n,1) == 0)
}
is_oddbit2 <- function(n){
return( as.integer(as.raw(n) & as.raw(1)) == 0)
}
is_oddcommon <- function(n){
return( n%%2 == 0)
}
system.time(lapply(5:50000, is_oddbit))
system.time(lapply(5:50000, is_oddbit2))
system.time(lapply(5:500000, is_oddcommon))
system.time(lapply(5:50000, is_oddbit))
system.time(lapply(5:50000, is_oddbit2))
system.time(lapply(5:50000, is_oddcommon))
system.time(lapply(5:500000, is_oddbit))
system.time(lapply(5:500000, is_oddbit2))
system.time(lapply(5:500000, is_oddcommon))
lista1 <- sample(LETTERS, 10)
lista1
?data.frame
names(lista1)
names(lista1) <- "lista"
lista1
names(lista1) <- paste("p", 1:length(lista1))
lista1
vet <- runif(10, min = 0, max = 255)
vet
lista1 <- sample(LETTERS, 10)
lista1
names(lista1) <- paste("p", 1:length(lista1))
data2 <-list()
for (n in 1:10){
data2[[n]] <- data.frame(n, sample(letters,1), floor(rnorm(1,50)))
}
names(data2) <- list(c("index", "id", "points"))
data2
View(data2)
data <- list()
N <- 100
for (n in 1:N) {
data[[n]] = data.frame(index = n, char = sample(letters, 1), z = rnorm(1))
}
head(data)
data <- list()
N <- 100
for (n in 1:N) {
data[[n]] = data.frame(index = n, char = sample(letters, 1), z = rnorm(1))
}
head(data)
data <- list()
N <- 100
for (n in 1:N) {
data[[n]] = data.frame(index = n, char = sample(letters, 1), z = rnorm(1))
}
head(data)
do.call(rbind, data)
class(do.call(rbind, data))
data2 <-list()
for (n in 1:10){
data2[[n]] <- data.frame(n, sample(letters,1), floor(rnorm(1,50)))
}
do.call(rbind, data2)
names(data2) <- list(c("index", "id", "points"))
View(data2)
data2 <-list()
for (n in 1:10){
data2[[n]] <- data.frame(n, sample(letters,1), floor(rnorm(1,50)))
}
data2<- do.call(rbind, data2)
names(data2) <- list(c("index", "id", "points"))
View(data2)
names(data2) <- (list(c("index", "id", "points")))
View(data2)
names(data2) <- c("index", "id", "points")
View(data2)
data3 <- sample(1:100,10)
mat1 <- matrix(data = data3, 5, byrow = F)
mat1
mat1 <- matrix(data = data3, 5, byrow = T)
mat1
mat1 <- matrix(data = data3, r <-5 , byrow = T, dimnames = list(paste("l", 1:r), paste("c", 1:(length(data3)/r))))
mat1
install.packages(c("ggvis", "tm", "dplyr"))
install.packages('sqldf')
mat1 <- matrix(c(1:50), nrow = 5, ncol = 5, byrow = T)
mat1
mat1[mat1 > 15]
setwd("C:/Users/Bárbara/OneDrive/Cursos/Avulsos/DSA-Cientista_dados/I_Azure_R/.RData")
setwd("C:/Users/Bárbara/OneDrive/Cursos/Avulsos/DSA-Cientista_dados/I_Azure_R/Cap02")
